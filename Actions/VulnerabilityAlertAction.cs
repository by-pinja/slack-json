using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Linq;
using Slack.Json.Github;
using Slack.Json.Slack;
using Slack.Json.Util;

namespace Slack.Json.Actions
{
    public class VulnerabilityAlertAction : IRequestAction
    {
        private readonly ISlackMessaging slack;
        private readonly ILogger<VulnerabilityAlertAction> logger;

        public VulnerabilityAlertAction(ISlackMessaging slack, ILogger<VulnerabilityAlertAction> logger)
        {
            this.slack = slack;
            this.logger = logger;
        }

        public string RequestType => "repository_vulnerability_alert";
        public string RequestAction => "create";
        public string Type => "repository_vulnerability_alert";

        public void Execute(JObject request, IEnumerable<ISlackAction> actions)
        {
            var packageName = request.Get<string>(x => x.alert.affected_package_name);
            var affectedRange = request.Get<string>(x => x.alert.affected_range);
            var externalReference = request.Get<string>(x => x.alert.external_reference);
            
            if (packageName == null || affectedRange == null || externalReference == null)
                throw new InvalidOperationException($"Missing alert.affected_package_name, alert.affected_range or alert.external_reference");

            actions
                .ToList()
                .ForEach(action =>
                {
                    this.logger.LogInformation($"Sending message to '{action.Channel}'");
                    this.slack.Send(action.Channel,
                        new SlackMessageModel($"A security vulnerability was found", "")
                        {
                            Text = $"Found a security vulnerability in package {packageName}:{affectedRange}. More: {externalReference}",
                            Color = "danger"
                        });
                });
        }
    }
}